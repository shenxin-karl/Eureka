
// Generated from EffectLab.g4 by ANTLR 4.11.1


#include "EffectLabLexer.h"


using namespace antlr4;

using namespace Eureka::ParserDetails;


using namespace antlr4;

namespace {

struct EffectLabLexerStaticData final {
  EffectLabLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  EffectLabLexerStaticData(const EffectLabLexerStaticData&) = delete;
  EffectLabLexerStaticData(EffectLabLexerStaticData&&) = delete;
  EffectLabLexerStaticData& operator=(const EffectLabLexerStaticData&) = delete;
  EffectLabLexerStaticData& operator=(EffectLabLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag effectlablexerLexerOnceFlag;
EffectLabLexerStaticData *effectlablexerLexerStaticData = nullptr;

void effectlablexerLexerInitialize() {
  assert(effectlablexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<EffectLabLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "BoolVal", "IntVal", "FloatVal", "String", "Identity", "KWIdentity", 
      "KWTrue", "KWFalse", "KWWhite", "KWBlack", "KWBump", "WhiteSpace", 
      "LineComment", "Comment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'SourcePath'", "':'", "';'", "'Properties'", "'{'", "'}'", "'('", 
      "','", "')'", "'bool'", "'Bool'", "'='", "'int'", "'Int'", "'float'", 
      "'Float'", "'float2'", "'Float2'", "'float3'", "'Float3'", "'float4'", 
      "'Float4'", "'2d'", "'2D'", "'matrix'", "'Matrix'", "", "", "", "", 
      "", "'identity'", "'true'", "'false'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "BoolVal", "IntVal", "FloatVal", 
      "String", "Identity", "KWIdentity", "KWTrue", "KWFalse", "KWWhite", 
      "KWBlack", "KWBump", "WhiteSpace", "LineComment", "Comment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,40,350,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
  	3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
  	1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
  	1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,
  	1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
  	1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
  	1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,26,1,26,3,26,214,8,26,1,27,3,27,217,8,27,1,
  	27,1,27,5,27,221,8,27,10,27,12,27,224,9,27,1,28,3,28,227,8,28,1,28,4,
  	28,230,8,28,11,28,12,28,231,1,28,1,28,5,28,236,8,28,10,28,12,28,239,9,
  	28,1,28,3,28,242,8,28,1,29,1,29,5,29,246,8,29,10,29,12,29,249,9,29,1,
  	29,1,29,1,30,1,30,5,30,255,8,30,10,30,12,30,258,9,30,1,31,1,31,1,31,1,
  	31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,
  	33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,290,
  	8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,302,8,35,
  	1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,312,8,36,1,37,4,37,315,8,
  	37,11,37,12,37,316,1,37,1,37,1,38,1,38,1,38,1,38,5,38,325,8,38,10,38,
  	12,38,328,9,38,1,38,3,38,331,8,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,
  	1,39,5,39,341,8,39,10,39,12,39,344,9,39,1,39,1,39,1,39,1,39,1,39,3,247,
  	326,342,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
  	25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
  	24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
  	71,36,73,37,75,38,77,39,79,40,1,0,6,2,0,43,43,45,45,1,0,49,57,1,0,48,
  	57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,
  	32,32,365,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
  	0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
  	1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
  	0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
  	0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
  	1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
  	0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
  	0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,1,0,0,0,3,92,1,0,0,0,5,94,
  	1,0,0,0,7,96,1,0,0,0,9,107,1,0,0,0,11,109,1,0,0,0,13,111,1,0,0,0,15,113,
  	1,0,0,0,17,115,1,0,0,0,19,117,1,0,0,0,21,122,1,0,0,0,23,127,1,0,0,0,25,
  	129,1,0,0,0,27,133,1,0,0,0,29,137,1,0,0,0,31,143,1,0,0,0,33,149,1,0,0,
  	0,35,156,1,0,0,0,37,163,1,0,0,0,39,170,1,0,0,0,41,177,1,0,0,0,43,184,
  	1,0,0,0,45,191,1,0,0,0,47,194,1,0,0,0,49,197,1,0,0,0,51,204,1,0,0,0,53,
  	213,1,0,0,0,55,216,1,0,0,0,57,226,1,0,0,0,59,243,1,0,0,0,61,252,1,0,0,
  	0,63,259,1,0,0,0,65,268,1,0,0,0,67,273,1,0,0,0,69,289,1,0,0,0,71,301,
  	1,0,0,0,73,311,1,0,0,0,75,314,1,0,0,0,77,320,1,0,0,0,79,336,1,0,0,0,81,
  	82,5,83,0,0,82,83,5,111,0,0,83,84,5,117,0,0,84,85,5,114,0,0,85,86,5,99,
  	0,0,86,87,5,101,0,0,87,88,5,80,0,0,88,89,5,97,0,0,89,90,5,116,0,0,90,
  	91,5,104,0,0,91,2,1,0,0,0,92,93,5,58,0,0,93,4,1,0,0,0,94,95,5,59,0,0,
  	95,6,1,0,0,0,96,97,5,80,0,0,97,98,5,114,0,0,98,99,5,111,0,0,99,100,5,
  	112,0,0,100,101,5,101,0,0,101,102,5,114,0,0,102,103,5,116,0,0,103,104,
  	5,105,0,0,104,105,5,101,0,0,105,106,5,115,0,0,106,8,1,0,0,0,107,108,5,
  	123,0,0,108,10,1,0,0,0,109,110,5,125,0,0,110,12,1,0,0,0,111,112,5,40,
  	0,0,112,14,1,0,0,0,113,114,5,44,0,0,114,16,1,0,0,0,115,116,5,41,0,0,116,
  	18,1,0,0,0,117,118,5,98,0,0,118,119,5,111,0,0,119,120,5,111,0,0,120,121,
  	5,108,0,0,121,20,1,0,0,0,122,123,5,66,0,0,123,124,5,111,0,0,124,125,5,
  	111,0,0,125,126,5,108,0,0,126,22,1,0,0,0,127,128,5,61,0,0,128,24,1,0,
  	0,0,129,130,5,105,0,0,130,131,5,110,0,0,131,132,5,116,0,0,132,26,1,0,
  	0,0,133,134,5,73,0,0,134,135,5,110,0,0,135,136,5,116,0,0,136,28,1,0,0,
  	0,137,138,5,102,0,0,138,139,5,108,0,0,139,140,5,111,0,0,140,141,5,97,
  	0,0,141,142,5,116,0,0,142,30,1,0,0,0,143,144,5,70,0,0,144,145,5,108,0,
  	0,145,146,5,111,0,0,146,147,5,97,0,0,147,148,5,116,0,0,148,32,1,0,0,0,
  	149,150,5,102,0,0,150,151,5,108,0,0,151,152,5,111,0,0,152,153,5,97,0,
  	0,153,154,5,116,0,0,154,155,5,50,0,0,155,34,1,0,0,0,156,157,5,70,0,0,
  	157,158,5,108,0,0,158,159,5,111,0,0,159,160,5,97,0,0,160,161,5,116,0,
  	0,161,162,5,50,0,0,162,36,1,0,0,0,163,164,5,102,0,0,164,165,5,108,0,0,
  	165,166,5,111,0,0,166,167,5,97,0,0,167,168,5,116,0,0,168,169,5,51,0,0,
  	169,38,1,0,0,0,170,171,5,70,0,0,171,172,5,108,0,0,172,173,5,111,0,0,173,
  	174,5,97,0,0,174,175,5,116,0,0,175,176,5,51,0,0,176,40,1,0,0,0,177,178,
  	5,102,0,0,178,179,5,108,0,0,179,180,5,111,0,0,180,181,5,97,0,0,181,182,
  	5,116,0,0,182,183,5,52,0,0,183,42,1,0,0,0,184,185,5,70,0,0,185,186,5,
  	108,0,0,186,187,5,111,0,0,187,188,5,97,0,0,188,189,5,116,0,0,189,190,
  	5,52,0,0,190,44,1,0,0,0,191,192,5,50,0,0,192,193,5,100,0,0,193,46,1,0,
  	0,0,194,195,5,50,0,0,195,196,5,68,0,0,196,48,1,0,0,0,197,198,5,109,0,
  	0,198,199,5,97,0,0,199,200,5,116,0,0,200,201,5,114,0,0,201,202,5,105,
  	0,0,202,203,5,120,0,0,203,50,1,0,0,0,204,205,5,77,0,0,205,206,5,97,0,
  	0,206,207,5,116,0,0,207,208,5,114,0,0,208,209,5,105,0,0,209,210,5,120,
  	0,0,210,52,1,0,0,0,211,214,3,65,32,0,212,214,3,67,33,0,213,211,1,0,0,
  	0,213,212,1,0,0,0,214,54,1,0,0,0,215,217,7,0,0,0,216,215,1,0,0,0,216,
  	217,1,0,0,0,217,218,1,0,0,0,218,222,7,1,0,0,219,221,7,2,0,0,220,219,1,
  	0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,56,1,0,0,0,
  	224,222,1,0,0,0,225,227,7,0,0,0,226,225,1,0,0,0,226,227,1,0,0,0,227,229,
  	1,0,0,0,228,230,7,2,0,0,229,228,1,0,0,0,230,231,1,0,0,0,231,229,1,0,0,
  	0,231,232,1,0,0,0,232,233,1,0,0,0,233,237,5,46,0,0,234,236,7,2,0,0,235,
  	234,1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,241,1,
  	0,0,0,239,237,1,0,0,0,240,242,5,102,0,0,241,240,1,0,0,0,241,242,1,0,0,
  	0,242,58,1,0,0,0,243,247,5,34,0,0,244,246,9,0,0,0,245,244,1,0,0,0,246,
  	249,1,0,0,0,247,248,1,0,0,0,247,245,1,0,0,0,248,250,1,0,0,0,249,247,1,
  	0,0,0,250,251,5,34,0,0,251,60,1,0,0,0,252,256,7,3,0,0,253,255,7,4,0,0,
  	254,253,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,62,
  	1,0,0,0,258,256,1,0,0,0,259,260,5,105,0,0,260,261,5,100,0,0,261,262,5,
  	101,0,0,262,263,5,110,0,0,263,264,5,116,0,0,264,265,5,105,0,0,265,266,
  	5,116,0,0,266,267,5,121,0,0,267,64,1,0,0,0,268,269,5,116,0,0,269,270,
  	5,114,0,0,270,271,5,117,0,0,271,272,5,101,0,0,272,66,1,0,0,0,273,274,
  	5,102,0,0,274,275,5,97,0,0,275,276,5,108,0,0,276,277,5,115,0,0,277,278,
  	5,101,0,0,278,68,1,0,0,0,279,280,5,119,0,0,280,281,5,104,0,0,281,282,
  	5,105,0,0,282,283,5,116,0,0,283,290,5,101,0,0,284,285,5,87,0,0,285,286,
  	5,104,0,0,286,287,5,105,0,0,287,288,5,116,0,0,288,290,5,101,0,0,289,279,
  	1,0,0,0,289,284,1,0,0,0,290,70,1,0,0,0,291,292,5,98,0,0,292,293,5,108,
  	0,0,293,294,5,97,0,0,294,295,5,99,0,0,295,302,5,107,0,0,296,297,5,66,
  	0,0,297,298,5,108,0,0,298,299,5,97,0,0,299,300,5,99,0,0,300,302,5,107,
  	0,0,301,291,1,0,0,0,301,296,1,0,0,0,302,72,1,0,0,0,303,304,5,98,0,0,304,
  	305,5,117,0,0,305,306,5,109,0,0,306,312,5,112,0,0,307,308,5,66,0,0,308,
  	309,5,117,0,0,309,310,5,109,0,0,310,312,5,112,0,0,311,303,1,0,0,0,311,
  	307,1,0,0,0,312,74,1,0,0,0,313,315,7,5,0,0,314,313,1,0,0,0,315,316,1,
  	0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,319,6,37,0,
  	0,319,76,1,0,0,0,320,321,5,47,0,0,321,322,5,47,0,0,322,326,1,0,0,0,323,
  	325,9,0,0,0,324,323,1,0,0,0,325,328,1,0,0,0,326,327,1,0,0,0,326,324,1,
  	0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,329,331,5,13,0,0,330,329,1,0,0,
  	0,330,331,1,0,0,0,331,332,1,0,0,0,332,333,5,10,0,0,333,334,1,0,0,0,334,
  	335,6,38,0,0,335,78,1,0,0,0,336,337,5,47,0,0,337,338,5,42,0,0,338,342,
  	1,0,0,0,339,341,9,0,0,0,340,339,1,0,0,0,341,344,1,0,0,0,342,343,1,0,0,
  	0,342,340,1,0,0,0,343,345,1,0,0,0,344,342,1,0,0,0,345,346,5,42,0,0,346,
  	347,5,47,0,0,347,348,1,0,0,0,348,349,6,39,0,0,349,80,1,0,0,0,17,0,213,
  	216,222,226,231,237,241,247,256,289,301,311,316,326,330,342,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  effectlablexerLexerStaticData = staticData.release();
}

}

EffectLabLexer::EffectLabLexer(CharStream *input) : Lexer(input) {
  EffectLabLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *effectlablexerLexerStaticData->atn, effectlablexerLexerStaticData->decisionToDFA, effectlablexerLexerStaticData->sharedContextCache);
}

EffectLabLexer::~EffectLabLexer() {
  delete _interpreter;
}

std::string EffectLabLexer::getGrammarFileName() const {
  return "EffectLab.g4";
}

const std::vector<std::string>& EffectLabLexer::getRuleNames() const {
  return effectlablexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& EffectLabLexer::getChannelNames() const {
  return effectlablexerLexerStaticData->channelNames;
}

const std::vector<std::string>& EffectLabLexer::getModeNames() const {
  return effectlablexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& EffectLabLexer::getVocabulary() const {
  return effectlablexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView EffectLabLexer::getSerializedATN() const {
  return effectlablexerLexerStaticData->serializedATN;
}

const atn::ATN& EffectLabLexer::getATN() const {
  return *effectlablexerLexerStaticData->atn;
}




void EffectLabLexer::initialize() {
  ::antlr4::internal::call_once(effectlablexerLexerOnceFlag, effectlablexerLexerInitialize);
}
